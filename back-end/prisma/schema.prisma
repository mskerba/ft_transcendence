// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// schema.prisma

model User {
  userId                  String       @id @default(cuid())
  name                    String?   @unique
  email                   String    @unique
  avatar                  String    @default("https://www.svgrepo.com/show/213882/avatar-user.svg")
  hashedRt                String?
  twoFA_Enabled           Boolean   @default(false)
  twoFA_Verified          Boolean   @default(false)
  twoFA_SecretKey         String?
  registrationDate        DateTime  @default(now())

  otpVerification         UserOTPVerification?

  sentFriendRequests      FriendRequest[] @relation("SentFriendRequests")

  receivedFriendRequests  FriendRequest[] @relation("ReceivedFriendRequests")

  user1Friends            Friendship[]    @relation("User1Friends")
  user2Friends            Friendship[]    @relation("User2Friends")

  // iharile 
  
  dmMessage               DirectMessage[]

  User1                   SoloConversation[]    @relation("UserConv1")
  User2                   SoloConversation[]    @relation("UserConv2")

  roleUser                RoleUser[]
  roomMessage             RoomMessage[]

  block1                BlockUser[]             @relation("Blocking")
  block2                BlockUser[]             @relation("Blocked")

  kick                 KickUser[]
  bann                 BanUser[]
  mute                 MuteUser[]
  
}

model UserOTPVerification {
  id                      String       @id @default(cuid())
  userId                  String       @unique
  otp                     String
  expiresAt               DateTime
  user                    User      @relation(fields: [userId], references: [userId])
}

model FriendRequest {
  requestId               String       @id @default(cuid())
  senderId                String       @unique
  receiverId              String       @unique
  requestDate             DateTime

  sender                  User      @relation("SentFriendRequests", fields: [senderId], references: [userId])

  receiver                User      @relation("ReceivedFriendRequests", fields: [receiverId], references: [userId])
}

model Friendship {
  friendshipId            String       @id @default(cuid())
  user1Id                 String
  user2Id                 String
  friendshipDate          DateTime

  user1                   User      @relation("User1Friends", fields: [user1Id], references: [userId])

  user2                   User      @relation("User2Friends", fields: [user2Id], references: [userId])


}


// chat tables


// i need to make this two ids unique
model SoloConversation{
  
  conversationId String       @id @default(cuid())

  user1 User @relation("UserConv1", fields: [UserId1], references: [userId])
  UserId1 String 

  user2 User @relation("UserConv2", fields: [UserId2], references: [userId])
  UserId2 String 


}


model DirectMessage{

DirectMessageId String       @id @default(cuid())

text String

userid User @relation(fields: [UserId], references: [userId])
UserId String

}

model Room{

  RoomId String       @id @default(cuid())

  TypeRoom String

  avatar Bytes

  title String

  password String?

  roleUser RoleUser[]

  roomMessage RoomMessage[]

  kick  KickUser[]

  bann BanUser[]

  mute MuteUser[]

}


model RoleUser{

  RoleId  String       @id @default(cuid())

  
  roleUser User @relation(fields: [UserId], references: [userId])
  UserId String 
  
  RoleName String

  roomId Room @relation(fields: [RoomId], references: [RoomId])
  RoomId String 

}


model RoomMessage{

  RoomMessageId  String       @id @default(cuid())

  text String

  roomId Room @relation(fields: [RoomId], references: [RoomId])
  RoomId String

  userId User @relation(fields: [UserId], references: [userId])
  UserId String
}

// this between two user 
model BlockUser{

  BlockedUserId Int  @id @default(autoincrement())

  block1 User @relation("Blocking", fields: [TheBlockingUserId], references: [userId])
  TheBlockingUserId String
  
  block2 User @relation("Blocked", fields: [TheBlockedUserId], references: [userId])
  TheBlockedUserId String
}


// this happen in groups
model KickUser{

  KickUserId Int @id @default(autoincrement())

  roomId Room @relation(fields: [RoomId], references: [RoomId])
  RoomId String

  userId User @relation(fields: [UserId], references: [userId])
  UserId String
}

model BanUser{

  BannUserId Int  @id @default(autoincrement())

  roomId Room @relation(fields: [RoomId], references: [RoomId])
  RoomId String

  userId User @relation(fields: [UserId], references: [userId])
  UserId String

}

model MuteUser{

  MuteUserId Int @id @default(autoincrement())
 
  roomId Room @relation(fields: [RoomId], references: [RoomId])
  RoomId String

  userId User @relation(fields: [UserId], references: [userId])
  UserId String
  
  StartTime  DateTime
  EndTime    DateTime  
  
}














