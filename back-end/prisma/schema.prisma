// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// for local url = "postgresql://myuser:postgres@localhost:5432/mydb?schema=public"
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// schema.prisma

model User {
  userId           Int      @id @default(autoincrement())
  name             String?  @unique
  email            String   @unique
  avatar           String   @default("default.svg")
  level            Float    @default(0.0)
  games            Int      @default(0)
  wins             Int      @default(0)
  losses           Int      @default(0)
  friends          Int      @default(0)
  hashedRt         String?
  twoFA_Enabled    Boolean  @default(false)
  twoFA_Verified   Boolean  @default(false)
  twoFA_SecretKey  String?
  registrationDate DateTime @default(now())

  otpVerification UserOTPVerification?

  sentFriendRequests FriendRequest[] @relation("SentFriendRequests")

  receivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequests")

  user1Friends Friendship[] @relation("User1Friends")
  user2Friends Friendship[] @relation("User2Friends")

  blockedUsers  Block[] @relation("BlockedUsers")
  blockingUsers Block[] @relation("BlockingUsers")

  winnedGames Game[] @relation("winnedGames")
  losedGames  Game[] @relation("losedGames")

  // ... other relationships ...

  // iharile 

  dmMessage1 DirectMessage[]

  User1 LinkDirectMessage[] @relation("UserConv1")
  User2 LinkDirectMessage[] @relation("UserConv2")

  roleUser RoleUser[]

  roomMessage RoomMessage[]

  kick KickUser[]
  bann BanUser[]
  mute MuteUser[]

  status String  @default("online")
  sockId String?
}

model UserOTPVerification {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  otp       String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [userId])
}

model FriendRequest {
  requestId   String   @id @default(cuid())
  senderId    Int
  receiverId  Int
  requestDate DateTime @default(now())

  sender User @relation("SentFriendRequests", fields: [senderId], references: [userId])

  receiver User @relation("ReceivedFriendRequests", fields: [receiverId], references: [userId])
}

model Friendship {
  friendshipId   String   @id @default(cuid())
  user1Id        Int
  user2Id        Int
  friendshipDate DateTime @default(now())

  user1 User @relation("User1Friends", fields: [user1Id], references: [userId])

  user2 User @relation("User2Friends", fields: [user2Id], references: [userId])

  @@unique([user1Id, user2Id])
}

model Block {
  blockId       String @id @default(cuid())
  userId        Int
  blockedUserId Int

  user        User @relation("BlockingUsers", fields: [userId], references: [userId])
  blockedUser User @relation("BlockedUsers", fields: [blockedUserId], references: [userId])

  blockDate DateTime @default(now())

  @@unique([userId, blockedUserId])
}

model Game {
  gameId String @id @default(cuid())

  winnerId Int
  loserId  Int

  winnerScore Int
  loserScore  Int
  winner      User     @relation("winnedGames", fields: [winnerId], references: [userId])
  loser       User     @relation("losedGames", fields: [loserId], references: [userId])
  gameDate    DateTime @default(now())
}

// chat tables

// i need to make this two ids unique
model LinkDirectMessage {
  conversationId String @id @default(cuid())

  user1   User @relation("UserConv1", fields: [UserId1], references: [userId])
  UserId1 Int

  user2     User            @relation("UserConv2", fields: [UserId2], references: [userId])
  UserId2   Int
  dmMessage DirectMessage[]

  @@unique([UserId1, UserId2])
}

model DirectMessage {
  DirectMessageId String @id @default(cuid())

  text String

  dateMessage DateTime @default(now())

  PrvMsgId  LinkDirectMessage @relation(fields: [privateId], references: [conversationId])
  privateId String

  userid   User @relation(fields: [senderId], references: [userId])
  senderId Int

  isSeen Boolean @default(false)

  countUnseen Int @default(0)
}

model Room {
  RoomId String @id @default(cuid())

  TypeRoom String

  avatar String @default("group-avatar.svg")

  title String

  password String?

  roleUser RoleUser[]

  roomMessage RoomMessage[]

  kick KickUser[]

  bann BanUser[]

  mute MuteUser[]
}

model RoleUser {
  RoleId String @id @default(cuid())

  roleUser User @relation(fields: [UserId], references: [userId])
  UserId   Int

  RoleName String

  roomId Room   @relation(fields: [RoomId], references: [RoomId])
  RoomId String

  @@unique([UserId, RoomId])
}

model RoomMessage {
  RoomMessageId String @id @default(cuid())

  text String

  roomId Room   @relation(fields: [RoomId], references: [RoomId])
  RoomId String

  userId User @relation(fields: [UserId], references: [userId])
  UserId Int

  dateSent DateTime @default(now())
}

// this happen in groups
model KickUser {
  KickUserId Int @id @default(autoincrement())

  roomId Room   @relation(fields: [RoomId], references: [RoomId])
  RoomId String

  userId User @relation(fields: [UserId], references: [userId])
  UserId Int

  @@unique([RoomId, UserId])
}

model BanUser {
  BannUserId Int @id @default(autoincrement())

  roomId Room   @relation(fields: [RoomId], references: [RoomId])
  RoomId String

  userId User @relation(fields: [UserId], references: [userId])
  UserId Int

  @@unique([RoomId, UserId])
}

model MuteUser {
  MuteUserId Int @id @default(autoincrement())

  roomId Room   @relation(fields: [RoomId], references: [RoomId])
  RoomId String

  userId User @relation(fields: [UserId], references: [userId])
  UserId Int

  StartTime DateTime
  EndTime   DateTime

  @@unique([RoomId, UserId])
}
